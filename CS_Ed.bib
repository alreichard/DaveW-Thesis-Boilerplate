%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%                                                                                             %%%%%%%%
%%%%%%%%                                                                                             %%%%%%%%
%%%%%%%%                                    REMEMBER!                                                %%%%%%%%
%%%%%%%%                                                                                             %%%%%%%%
%%%%%%%%    Please update this  file on the github repository, not in an overleaf project            %%%%%%%%
%%%%%%%%                                                                                             %%%%%%%%
%%%%%%%%    Unless you're editing directly on github.com, remember to pull first!                    %%%%%%%%
%%%%%%%%    (changes should show up within 2 min. if you "refresh" the imported file in overleaf)    %%%%%%%%
%%%%%%%%                                                                                             %%%%%%%%
%%%%%%%%    When adding to the bibliography, please keep things sorted by year.                      %%%%%%%%
%%%%%%%%                                                                                             %%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%  List of CS Education articles, sorted by year, and, within that, alphabetically by first author
%%    Also, we could add comments like % TAG: ExperimentalDesign, and then search for them 
%% Tags include: ExperimentalDesign, NotionalMachine, Recursion, LowLevel, OOP,

%%%%%%%%%%%%%%  Articles published in 1981  %%%%%%%%%%%%%%

% TAG: NotionalMachine
@article{DuBoulay:Notional81,
title = {The black box inside the glass box: presenting computing concepts to novices},
journal = {International Journal of Man-Machine Studies},
volume = {14},
number = {3},
pages = {237-249},
year = {1981},
issn = {0020-7373},
doi = {https://doi.org/10.1016/S0020-7373(81)80056-9},
url = {https://www.sciencedirect.com/science/article/pii/S0020737381800569},
author = {Benedict du Boulay and Tim O'Shea and John Monk},
abstract = {Simplicity and visibility are two important characteristics of programming languages for 
novices. Novices start programming with very little idea of the properties of the notional machine 
implied by the language they are learning. To help them learn these properties, the notional machine 
should be simple. That is, it should consist of a small number of parts that interact in ways that 
can be easily understood, possibly by analogy to other mechanisms with which the novice is more familiar. 
A notional machine is the idealized model of the computer implied by the constructs of the programming 
language. Visibility is concerned with methods for viewing selected parts and processes of this 
notional machine in action. We introduce the term “commentary” which is the system's dynamic 
characterization of the notional machine, expressed in either text or pictures on the user's terminal. 
We examine the simplicity and visibility of three systems, each designed to provide programming experience 
to different populations of novices.}
}

%%%%%%%%%%%%%%  Articles published in 1986  %%%%%%%%%%%%%%

% TAG: NotionalMachine
% SAGE id is doi:10.2190/3LFX-9RRF-67T8-UVK9
@article{DuBoulay:Notional86,
author = {Benedict Du Boulay},
title ={Some Difficulties of Learning to Program},
journal = {Journal of Educational Computing Research},
volume = {2},
number = {1},
pages = {57-73},
year = {1986},
doi = {10.2190/3LFX-9RRF-67T8-UVK9},
URL = { 
        https://doi.org/10.2190/3LFX-9RRF-67T8-UVK9  
},
eprint = { 
        https://doi.org/10.2190/3LFX-9RRF-67T8-UVK9   
},
    abstract = {This article is a brief introduction to some of the issues that teachers of programming may find helpful.
    It starts by presenting a fairly idiosyncratic view of teaching programming which makes use of mechanistic analogies and points out some of the pitfalls.
    The article goes on to examine certain errors based on the misapplication of analogies as well as certain interaction errors.
    The main emphasis is on the notional machine both at the general level of understanding (and misunderstanding)
      the relationship of the terminal to the computer as such, as well as at the more specific level of understanding assignment.
    Notation and mistakes that poorly-designed languages can induce novices to commit are discussed. }
}



%%%%%%%%%%%%%%  Articles published in 2003  %%%%%%%%%%%%%%


% TAG: Recursion
@inproceedings{GSG:Recursion03,
author = {G\"{o}tschi, Tina and Sanders, Ian and Galpin, Vashti},
title = {Mental Models of Recursion},
year = {2003},
isbn = {158113648X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/611892.612004},
doi = {10.1145/611892.612004},
abstract = {Recursion is a fundamental concept in Computer Science. A student's knowledge of recursion
can be termed their mental model of recursion. A student's mental model is viable
if it allows them to accurately and consistently represent the mechanics of recursion.
Non-viable mental models are constructed if students have misconceptions about the
mechanisms of recursion or have misconceptions about concepts fundamental to recursion.
This paper presents a study of the mental models of recursion that first year students
at the University of the Witwatersrand have constructed in 2000, 2001 and 2002. It
was found that while the majority of students constructed the viable copies model,
many non-viable models such as the looping, active, step, magic, return-value and
various odd models were also constructed. Identifying the models that students have
can allow lecturers to target individual students' specific problems and analysis
of the models can provide insight into learning.},
booktitle = {Proceedings of the 34th SIGCSE Technical Symposium on Computer Science Education},
pages = {346–350},
numpages = {5},
keywords = {recursion, pedagogy, programming, mental models, learning, constructivism},
location = {Reno, Navada, USA},
series = {SIGCSE '03}
}

%%%%%%%%%%%%%%  Articles published in 2004  %%%%%%%%%%%%%%


@article{10.1145/792548.612004,
author = {G\"{o}tschi, Tina and Sanders, Ian and Galpin, Vashti},
title = {Mental Models of Recursion},
year = {2003},
issue_date = {January 2003},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {35},
number = {1},
issn = {0097-8418},
url = {https://doi.org/10.1145/792548.612004},
doi = {10.1145/792548.612004},
abstract = {Recursion is a fundamental concept in Computer Science. A student's knowledge of recursion
can be termed their mental model of recursion. A student's mental model is viable
if it allows them to accurately and consistently represent the mechanics of recursion.
Non-viable mental models are constructed if students have misconceptions about the
mechanisms of recursion or have misconceptions about concepts fundamental to recursion.
This paper presents a study of the mental models of recursion that first year students
at the University of the Witwatersrand have constructed in 2000, 2001 and 2002. It
was found that while the majority of students constructed the viable copies model,
many non-viable models such as the looping, active, step, magic, return-value and
various odd models were also constructed. Identifying the models that students have
can allow lecturers to target individual students' specific problems and analysis
of the models can provide insight into learning.},
journal = {SIGCSE Bull.},
month = jan,
pages = {346–350},
numpages = {5},
keywords = {recursion, mental models, programming, learning, pedagogy, constructivism}
}

@article{TJ04:Python,
author = {Tony Jenkins},
title = {The First Language - A Case for Python?},
journal = {Innovation in Teaching and Learning in Information and Computer Sciences},
volume = {3},
number = {2},
pages = {1-9},
year  = {2004},
publisher = {Routledge},
doi = {10.11120/ital.2004.03020004},

URL = {https://doi.org/10.11120/ital.2004.03020004},
eprint = {https://doi.org/10.11120/ital.2004.03020004}
}

%%%%%%%%%%%%%%  Articles published in 2009  %%%%%%%%%%%%%%

@article{RE09:Prep,
author = {Enbody, Richard J. and Punch, William F. and McCullen, Mark},
title = {Python CS1 as Preparation for C++ CS2},
year = {2009},
issue_date = {March 2009},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {41},
number = {1},
issn = {0097-8418},
url = {https://doi.org/10.1145/1539024.1508907},
doi = {10.1145/1539024.1508907},
abstract = {How suitable is a Python-based CS1 course as preparation for a C++-based CS2 course?
After fifteen years of using C++ for both CS1 and CS2, the Computer Science Department
at Michigan State University changed the CS1 course to Python. This paper examines
the impact of that change on the second course in the sequence, CS2, which kept C++
as its primary language. We report results on a CS2 class which had a mixture of students
who had used either C++ or Python from our CS1 course. The CS2 class covered the same
topics as previously, though with some changes, and even gave the same final exam
as a previous offering. Independent samples t-tests were used to compare students
from the Python group with students from the non-Python group on three outcomes: final
exam grade, programming projects scores, and final grade for the course. The main
result was that there were no significant differences between the groups for all three
outcomes. In addition, multiple regression analysis showed that students' past performance
(overall GPA) in the University predicted final grades, final exam scores, and programming
project scores for the course, but there was no effect of the programming language
feature: Python or non-Python. We feel this shows that the Python-based CS1 course
prepared students for the C++-based CS2 course as well as the C++-based CS1 course
did---while exposing them to a different, powerful and useful language.},
journal = {SIGCSE Bull.},
month = mar,
pages = {116–120},
numpages = {5},
keywords = {curriculum, intro. to programming, python, cs1, cs2}
}

%%%%%%%%%%%%%%  Articles published in 2010  %%%%%%%%%%%%%%

@inproceedings{RE10:PythonNon,
author = {Enbody, Richard J. and Punch, William F.},
title = {Performance of Python CS1 Students in Mid-Level Non-Python CS Courses},
year = {2010},
isbn = {9781450300063},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1734263.1734437},
doi = {10.1145/1734263.1734437},
abstract = {If you change the CS1 language to Python, what is the impact on the rest of the curriculum?
In earlier work we examined the impact of changing CS1 from C++ to Python while leaving
CS2 in C++. We found that Python-prepared CS1 students fared no differently in CS2
than students whose CS1 course was in C++, even though CS2 was taught in C++ and covered
the same topics as in previous years. Was that an anomaly? What happens in the next
tier of courses? When our CS1 was first changed to Python there were many students
who had taken CS1 in C++ still in the system. The result is that there is a cadre
of students with either CS1 in Python or CS1 in C++ moving together through our curriculum.
This one-time occurrence is an opportunity to study the students with many variables
fixed. Our next tier of courses is a C-based computer organization course, a C++ based
object-oriented software design course, and a data structures course. We found that
the students who started with Python fared as well as the CS1 C++ students. As before,
the best predictor of performance was their college GPA. Python versus C++ CS1 preparation
was not a predictor of performance in any course. We conclude again that in our C++
based curriculum changing CS1 to Python had no negative impact on student performance
and did not require any significant change in those subsequent courses.},
booktitle = {Proceedings of the 41st ACM Technical Symposium on Computer Science Education},
pages = {520–523},
numpages = {4},
keywords = {cs1, introduction to programming, curriculum, python},
location = {Milwaukee, Wisconsin, USA},
series = {SIGCSE '10}
}


%%%%%%%%%%%%%%  Articles published in 2011  %%%%%%%%%%%%%%


% TAG: ExperimentalDesign
% ACM short-name 10.1145/2016911.2016919,
% but I want a "short name" I can remember, e.g., authors initials, one word, publication year, like so:
@inproceedings{FTR:Design11,
author = {Fincher, Sally and Tenenberg, Josh and Robins, Anthony},
title = {Research Design: Necessary Bricolage},
year = {2011},
isbn = {9781450308298},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2016911.2016919},
doi = {10.1145/2016911.2016919},
abstract = {In this paper we suggest that in order to advance, the field of computer science education
needs to craft its own research methods, to augment the borrowing of "traditional"
methods such as semi-structured interviews and surveys from other research traditions.
Two example instruments used in our recent research are discussed. We adopt the metaphor
of "bricolage" to characterise not only what researchers do, but to argue that this
may be a necessary step towards developing theory.},
booktitle = {Proceedings of the Seventh International Workshop on Computing Education Research},
pages = {27–32},
numpages = {6},
keywords = {bricolage, research methods, research design},
location = {Providence, Rhode Island, USA},
series = {ICER '11}
}



%%%%%%%%%%%%%%  Articles published in 2013  %%%%%%%%%%%%%%


@article{JS13:N,
author = {Sorva, Juha},
title = {Notional Machines and Introductory Programming Education},
year = {2013},
issue_date = {June 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2},
url = {https://doi.org/10.1145/2483710.2483713},
doi = {10.1145/2483710.2483713},
abstract = {This article brings together, summarizes, and comments on several threads of research
that have contributed to our understanding of the challenges that novice programmers
face when learning about the runtime dynamics of programs and the role of the computer
in program execution. More specifically, the review covers the literature on programming
misconceptions, the cognitive theory of mental models, constructivist theory of knowledge
and learning, phenomenographic research on experiencing programming, and the theory
of threshold concepts. These bodies of work are examined in relation to the concept
of a “notional machine”—an abstract computer for executing programs of a particular
kind. As a whole, the literature points to notional machines as a major challenge
in introductory programming education. It is argued that instructors should acknowledge
the notional machine as an explicit learning objective and address it in teaching.
Teaching within some programming paradigms, such as object-oriented programming, may
benefit from using multiple notional machines at different levels of abstraction.
Pointers to some promising pedagogical techniques are provided.},
journal = {ACM Trans. Comput. Educ.},
month = jul,
articleno = {8},
numpages = {31},
keywords = {Notional machine, misconceptions, constructivism, phenomenography, literature review, introductory programming education, CS1, threshold concepts, mental models}
}

%%%%%%%%%%%%%%  Articles published in 2014  %%%%%%%%%%%%%%

@inproceedings{RB14:lowlevel,
author = {Balasubramanian, Raghuraman and York, Zachary and Doran, Matthew and Biswas, Aritra and Girgin, Timur and Sankaralingam, Karthikeyan},
title = {Hands-on Introduction to Computer Science at the Freshman Level},
year = {2014},
isbn = {9781450326056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2538862.2538889},
doi = {10.1145/2538862.2538889},
abstract = {This paper details the creation of a hands-on introduction course that reflects the
dramatic growth and diversity in computer science. Our aim was to enable students
to get an end-to-end perspective on computer system design by building one. We report
on a two-year exercise in using the Arduino platform to build a series of hands-on
projects. We have used these projects in two course instances, and have obtained detailed
student feedback, which we analyze and present in this paper. The instructions, code
and videos developed are available open-source.},
booktitle = {Proceedings of the 45th ACM Technical Symposium on Computer Science Education},
pages = {235–240},
numpages = {6},
keywords = {pedagogy, introduction to computer science, hands-on projects},
location = {Atlanta, Georgia, USA},
series = {SIGCSE '14},
}

@misc{PG14:PythonPopular,
	title = {Python {Is} {Now} the {Most} {Popular} {Introductory} {Teaching} {Language} at {Top} ­{U}.{S}. ­{Universities}},
	url = {https://cacm.acm.org/blogs/blog-cacm/176450-python-is-now-the-most-popular-introductory-teaching-language-at-top-us-universities/fulltext},
	year={2014},
	abstract = {Eight of the top 10 CS departments in the U.S., and {\textasciitilde}70\% of the top 40, teach Python in introductory courses.},
	language = {en},
	urldate = {2021-10-29},
	author = {Guo, Philip},
}
  

%%%%%%%%%%%%%%  Articles published in 2018  %%%%%%%%%%%%%%

@inproceedings{NA18:PythonC++,
author = {Alzahrani, Nabeel and Vahid, Frank and Edgcomb, Alex and Nguyen, Kevin and Lysecky, Roman},
title = {Python Versus C++: An Analysis of Student Struggle on Small Coding Exercises in Introductory Programming Courses},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3160586},
doi = {10.1145/3159450.3160586},
abstract = {Many teachers of CS 1 (introductory programming) have switched to Python rather than C, C++, or Java. One reason is the belief that Python's interpreted nature plus simpler syntax and semantics ease a student's learning, but data supporting that belief is scarce. This paper addresses the question: Do Python learners struggle less than C++ learners? We analyzed student submissions on small coding exercises in CS 1 courses at 20 different universities, 10 courses using Python, and 11 using C++. Each course used either the Python or C++ version of an online textbook from one publisher, each book having 100+ small coding exercises, expected to take 2-5 minutes each. We considered 11 exercises whose Python and C++ versions were nearly identical and that appeared in various chapters. We defined struggle rate for exercises, where struggle means a student spent excessive time or attempts on an exercise. Based on that rate, we found the learning for Python was not eased; in fact, Python students had significantly higher struggle rates than C++ students (26\% vs. 13\%). Higher rates were seen even when considering only classes with no prerequisites, classes for majors only, or classes for non-majors only. We encourage the community to do further analyses, to help guide teachers when choosing a CS 1 language.},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {86–91},
numpages = {6},
keywords = {student struggle, coding exercises, python versus c++, CS1, introductory programming, homework},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@inbook{JD18:lowlevel,
author = {Durán, Francisco José and Villagrá-Arnedo, Carlos and Satorre-Cuerda, 
Rosana and Rosique, Patricia and Llorens, Faraón},
year = {2018},
month = {01},
pages = {431-445},
title = {Effects of Low-Level Development on Learning to Program},
isbn = {978-3-319-91151-9},
doi = {10.1007/978-3-319-91152-6_33},
abstract="There are subjects in which teaching and learning is hard by experience.
Some subjects in physics, maths or computing seem to be difficult by nature. 
Teachers test many ways to help student learn these subjects. In Computer Programming 
the approach seems to be using higher-level languages, concepts and abstractions. 
It seems reasonable that languages similar to human language can ease the task of 
computer programming. Similar ideas are explored in other subjects. However, this 
seems contradictory with the way we construct knowledge: lower-level concepts support 
the development of higher-level ones. Is it possible to master higher-level concepts 
without previously mastering lower-level ones?"
}

% TAG: Recursion
% TAG: NotionalMachine

% Annoying ACM label: 10.1145/3159450.3159479
@inproceedings{TFK:Recursion18,
author = {Tunnell Wilson, Preston and Fisler, Kathi and Krishnamurthi, Shriram},
title = {Evaluating the Tracing of Recursion in the Substitution Notional Machine},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3159479},
doi = {10.1145/3159450.3159479},
abstract = {We evaluate a notional machine for recursion based on algebraic substitution. To do
this, we decompose recursion into a progression of function call patterns, parameter
name reuse, and data structure complexity. At each stage, we test students' ability
to trace programs using substitution. We evaluate the correctness of their traces
along multiple dimensions, finding that students generally do well, and also observe
shortcuts and identify misconceptions. For comparison, we also have students trace
two problems using a traditional, imperative notional machine. Even though the substitution
model is unwieldy to use with compound data, students still perform better with it
than with the traditional notional machine.},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {1023–1028},
numpages = {6},
keywords = {substitution, pedagogy, tracing, recursion},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@article{JW18:PythonC,
author = {Wainer, Jacques and Xavier, Eduardo C.},
title = {A Controlled Experiment on Python vs C for an Introductory Programming Course: Students’ Outcomes},
year = {2018},
issue_date = {September 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {3},
url = {https://doi.org/10.1145/3152894},
doi = {10.1145/3152894},
abstract = {We performed a controlled experiment comparing a C and a Python Introductory Programming course. Three faculty members at University of Campinas, Brazil, taught the same CS1 course for the same majors in two different semesters, one version in Python and one in C, with a total of 391 students involved in the experiment. We measured the dropout rate, the failure rate, the grades on the two exams, the proportion of completed lab assignments, and the number of submissions per completed assignment. There was no difference in the dropout rate. The failure rate for Python was 16.9% against 23.1% for C. The effect size (Cohen’s D) on the comparison of Python against C on the midterm exam was 0.27, and 0.38 for the final exam. The effect size for the proportion of completed assignments was 0.39 and the effect size for the number of submissions per assignment was -0.61 (Python had less submissions per completed assignments). Thus, for all measures, with the exception of dropout rate, the version of the course in Python yielded better student outcomes than the version in C and all differences are significant (with 95% confidence) with the exception of the failure rate (p-value=0.12).},
journal = {ACM Trans. Comput. Educ.},
month = {aug},
articleno = {12},
numpages = {16},
keywords = {Introductory programming, controlled experiment, CS1, C, Python}
}

%%%%%%%%%%%%%%  Articles published in 2021  %%%%%%%%%%%%%%

@article{FD21:lowlevel,
	title = {A low-level approach to improve programming learning},
	volume = {20},
	issn = {1615-5289, 1615-5297},
	url = {https://link.springer.com/10.1007/s10209-020-00775-y},
	doi = {10.1007/s10209-020-00775-y},
	language = {en},
	number = {3},
	urldate = {2021-10-28},
	journal = {Universal Access in the Information Society},
	author = {Gallego-Durán, Francisco J. and Satorre-Cuerda, Rosana and Compañ-Rosique, Patricia and Villagrá-Arnedo, Carlos J. and Molina-Carmona, Rafael and Llorens-Largo, Faraón},
	month = aug,
	year = {2021},
	pages = {479--493}
}
